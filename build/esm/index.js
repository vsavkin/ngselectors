import { ChangeDetectorRef, Inject, SkipSelf, OpaqueToken, NgZone } from '@angular/core';
export const CHANGES = new OpaqueToken("changes");
function referenceEquality(a, b) {
    return a === b;
}
export function selector(t, opts = { equality: referenceEquality }) {
    return {
        provide: t,
        useFactory: selectorFactory(opts),
        deps: [CHANGES, ChangeDetectorRef, NgZone, [new Inject(t), new SkipSelf()]]
    };
}
function selectorFactory(opts) {
    return (changes, ref, zone, f) => {
        let stored = [];
        let changeDetection = false;
        const changeSubscription = changes.subscribe(() => {
            for (let i = 0; i < stored.length; ++i) {
                const { args, res } = stored[i];
                if (!opts.equality(f(...args), res)) {
                    markForCheck(ref);
                    break;
                }
            }
        });
        const microtaskSubscription = zone.onMicrotaskEmpty.subscribe(() => {
            changeDetection = true;
        });
        setUpDisposables(ref, changeSubscription, microtaskSubscription);
        return (...args) => {
            const res = f(...args);
            if (changeDetection) {
                stored = [];
                changeDetection = false;
            }
            stored.push({ args, res });
            return res;
        };
    };
}
function setUpDisposables(ref, changeSubscription, cdSubscription) {
    if (!ref.internalView.disposables) {
        ref.internalView.disposables = [];
    }
    ref.onDestroy(() => {
        changeSubscription.unsubscribe();
        cdSubscription.unsubscribe();
    });
}
function markForCheck(ref) {
    ref.internalView.viewChildren[0].changeDetectorRef.markForCheck();
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ik9BQU8sRUFBRSxpQkFBaUIsRUFBWSxNQUFNLEVBQUUsUUFBUSxFQUFFLFdBQVcsRUFBa0IsTUFBTSxFQUFFLE1BQU0sZUFBZTtBQUlsSCxPQUFPLE1BQU0sT0FBTyxHQUFHLElBQUksV0FBVyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBSWxELDJCQUEyQixDQUFNLEVBQUUsQ0FBTTtJQUN2QyxNQUFNLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUNqQixDQUFDO0FBRUQseUJBQXlCLENBQU0sRUFBRSxJQUFJLEdBQXNCLEVBQUMsUUFBUSxFQUFFLGlCQUFpQixFQUFDO0lBQ3RGLE1BQU0sQ0FBQztRQUNMLE9BQU8sRUFBRSxDQUFDO1FBQ1YsVUFBVSxFQUFFLGVBQWUsQ0FBQyxJQUFJLENBQUM7UUFDakMsSUFBSSxFQUFFLENBQUMsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sRUFBRSxDQUFDLElBQUksTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUksUUFBUSxFQUFFLENBQUMsQ0FBQztLQUM1RSxDQUFDO0FBQ0osQ0FBQztBQUVELHlCQUF5QixJQUF1QjtJQUU5QyxNQUFNLENBQUMsQ0FBQyxPQUF3QixFQUFFLEdBQXNCLEVBQUUsSUFBWSxFQUFFLENBQU07UUFDNUUsSUFBSSxNQUFNLEdBQThCLEVBQUUsQ0FBQztRQUMzQyxJQUFJLGVBQWUsR0FBRyxLQUFLLENBQUM7UUFFNUIsTUFBTSxrQkFBa0IsR0FBRyxPQUFPLENBQUMsU0FBUyxDQUFDO1lBQzNDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsTUFBTSxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDO2dCQUN2QyxNQUFNLEVBQUMsSUFBSSxFQUFFLEdBQUcsRUFBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDOUIsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztvQkFDcEMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxDQUFDO29CQUNsQixLQUFLLENBQUM7Z0JBQ1IsQ0FBQztZQUNILENBQUM7UUFDSCxDQUFDLENBQUMsQ0FBQztRQUVILE1BQU0scUJBQXFCLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixDQUFDLFNBQVMsQ0FBQztZQUM1RCxlQUFlLEdBQUcsSUFBSSxDQUFDO1FBQ3pCLENBQUMsQ0FBQyxDQUFDO1FBRUgsZ0JBQWdCLENBQUMsR0FBRyxFQUFFLGtCQUFrQixFQUFFLHFCQUFxQixDQUFDLENBQUM7UUFFakUsTUFBTSxDQUFDLENBQUMsR0FBRyxJQUFVO1lBQ25CLE1BQU0sR0FBRyxHQUFHLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDO1lBRXZCLEVBQUUsQ0FBQyxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUM7Z0JBQ3BCLE1BQU0sR0FBRyxFQUFFLENBQUM7Z0JBQ1osZUFBZSxHQUFHLEtBQUssQ0FBQztZQUMxQixDQUFDO1lBRUQsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFDLElBQUksRUFBRSxHQUFHLEVBQUMsQ0FBQyxDQUFDO1lBQ3pCLE1BQU0sQ0FBQyxHQUFHLENBQUM7UUFDYixDQUFDLENBQUM7SUFDSixDQUFDLENBQUM7QUFDSixDQUFDO0FBRUQsMEJBQTBCLEdBQVEsRUFBRSxrQkFBZ0MsRUFBRSxjQUE0QjtJQUNoRyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQztRQUNsQyxHQUFHLENBQUMsWUFBWSxDQUFDLFdBQVcsR0FBRyxFQUFFLENBQUM7SUFDcEMsQ0FBQztJQUNELEdBQUcsQ0FBQyxTQUFTLENBQUM7UUFDWixrQkFBa0IsQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUNqQyxjQUFjLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDL0IsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDO0FBRUQsc0JBQXNCLEdBQVE7SUFDNUIsR0FBRyxDQUFDLFlBQVksQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsaUJBQWlCLENBQUMsWUFBWSxFQUFFLENBQUM7QUFDcEUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENoYW5nZURldGVjdG9yUmVmLCBOZ01vZHVsZSwgSW5qZWN0LCBTa2lwU2VsZiwgT3BhcXVlVG9rZW4sIEFwcGxpY2F0aW9uUmVmLCBOZ1pvbmUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzL09ic2VydmFibGUnO1xuaW1wb3J0IHsgU3Vic2NyaXB0aW9uIH0gZnJvbSAncnhqcy9TdWJzY3JpcHRpb24nO1xuXG5leHBvcnQgY29uc3QgQ0hBTkdFUyA9IG5ldyBPcGFxdWVUb2tlbihcImNoYW5nZXNcIik7XG5cbmV4cG9ydCB0eXBlIEVxdWFsID0gKGE6IGFueSwgYjogYW55KSA9PiBib29sZWFuO1xuXG5mdW5jdGlvbiByZWZlcmVuY2VFcXVhbGl0eShhOiBhbnksIGI6IGFueSk6IGJvb2xlYW4ge1xuICByZXR1cm4gYSA9PT0gYjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNlbGVjdG9yKHQ6IGFueSwgb3B0czoge2VxdWFsaXR5OiBFcXVhbH0gPSB7ZXF1YWxpdHk6IHJlZmVyZW5jZUVxdWFsaXR5fSk6YW55IHtcbiAgcmV0dXJuIHtcbiAgICBwcm92aWRlOiB0LFxuICAgIHVzZUZhY3Rvcnk6IHNlbGVjdG9yRmFjdG9yeShvcHRzKSxcbiAgICBkZXBzOiBbQ0hBTkdFUywgQ2hhbmdlRGV0ZWN0b3JSZWYsIE5nWm9uZSwgW25ldyBJbmplY3QodCksIG5ldyBTa2lwU2VsZigpXV1cbiAgfTtcbn1cblxuZnVuY3Rpb24gc2VsZWN0b3JGYWN0b3J5KG9wdHM6IHtlcXVhbGl0eTogRXF1YWx9KSB7XG5cbiAgcmV0dXJuIChjaGFuZ2VzOiBPYnNlcnZhYmxlPGFueT4sIHJlZjogQ2hhbmdlRGV0ZWN0b3JSZWYsIHpvbmU6IE5nWm9uZSwgZjogYW55KSA9PiB7XG4gICAgbGV0IHN0b3JlZDoge2FyZ3M6IGFueVtdLCByZXM6IGFueX1bXSA9IFtdO1xuICAgIGxldCBjaGFuZ2VEZXRlY3Rpb24gPSBmYWxzZTtcblxuICAgIGNvbnN0IGNoYW5nZVN1YnNjcmlwdGlvbiA9IGNoYW5nZXMuc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc3RvcmVkLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIGNvbnN0IHthcmdzLCByZXN9ID0gc3RvcmVkW2ldO1xuICAgICAgICBpZiAoIW9wdHMuZXF1YWxpdHkoZiguLi5hcmdzKSwgcmVzKSkge1xuICAgICAgICAgIG1hcmtGb3JDaGVjayhyZWYpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBjb25zdCBtaWNyb3Rhc2tTdWJzY3JpcHRpb24gPSB6b25lLm9uTWljcm90YXNrRW1wdHkuc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgIGNoYW5nZURldGVjdGlvbiA9IHRydWU7XG4gICAgfSk7XG5cbiAgICBzZXRVcERpc3Bvc2FibGVzKHJlZiwgY2hhbmdlU3Vic2NyaXB0aW9uLCBtaWNyb3Rhc2tTdWJzY3JpcHRpb24pO1xuXG4gICAgcmV0dXJuICguLi5hcmdzOmFueVtdKSA9PiB7XG4gICAgICBjb25zdCByZXMgPSBmKC4uLmFyZ3MpO1xuXG4gICAgICBpZiAoY2hhbmdlRGV0ZWN0aW9uKSB7XG4gICAgICAgIHN0b3JlZCA9IFtdO1xuICAgICAgICBjaGFuZ2VEZXRlY3Rpb24gPSBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgc3RvcmVkLnB1c2goe2FyZ3MsIHJlc30pO1xuICAgICAgcmV0dXJuIHJlcztcbiAgICB9O1xuICB9O1xufVxuXG5mdW5jdGlvbiBzZXRVcERpc3Bvc2FibGVzKHJlZjogYW55LCBjaGFuZ2VTdWJzY3JpcHRpb246IFN1YnNjcmlwdGlvbiwgY2RTdWJzY3JpcHRpb246IFN1YnNjcmlwdGlvbik6IHZvaWQge1xuICBpZiAoIXJlZi5pbnRlcm5hbFZpZXcuZGlzcG9zYWJsZXMpIHtcbiAgICByZWYuaW50ZXJuYWxWaWV3LmRpc3Bvc2FibGVzID0gW107XG4gIH1cbiAgcmVmLm9uRGVzdHJveSgoKSA9PiB7XG4gICAgY2hhbmdlU3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgY2RTdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIG1hcmtGb3JDaGVjayhyZWY6IGFueSk6IHZvaWQge1xuICByZWYuaW50ZXJuYWxWaWV3LnZpZXdDaGlsZHJlblswXS5jaGFuZ2VEZXRlY3RvclJlZi5tYXJrRm9yQ2hlY2soKTtcbn0iXX0=